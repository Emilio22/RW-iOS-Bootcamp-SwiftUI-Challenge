//
//  PostView.swift
//  Birdui
//
//  Created by Audrey Tam on 4/7/20.
//  Copyright Â© 2020 Razeware. All rights reserved.
//

import SwiftUI

struct PostView: View {
<<<<<<< HEAD
  let post: MediaPost
  var postHandler: PostViewModel
  var onImageClick: ((MediaPost) -> Void)?
  
  var body: some View {
    // TODO: This should look exactly like Birdie's table view cell.
    // The post text is left-aligned below the mascot image.
    // The image, if any, is horizontally centered in the view.
    
    HStack(alignment: .top){
      
      Image("mascot_swift-badge")
        .resizable()
        .frame(width: 50, height: 50)
      
      VStack(alignment: .leading) {
        
        Text("\(post.userName)")
          .fontWeight(.medium)
          .padding(.top, 5)
        
        Text("\(post.getFormatedDate())")
          .font(.system(size: 12))
          .padding(.bottom, 15)
        
        Text("\(post.textBody)")
          .font(.system(size: 16))
          .fontWeight(.light)
        
        if post.uiImage != nil {
          Button(action: {
            if let imageClick = self.onImageClick {
              imageClick(self.post)
            }
          }) {
            Image(uiImage: post.uiImage!)
              .resizable()
              .scaledToFill()
              .frame(height: 150)
              .background(Color.gray)
              .cornerRadius(10)
              .clipped()
            }
          .buttonStyle(PlainButtonStyle())
        }
        
        HStack{
          
          ReactionButton(
            reactionType: .like,
            reactionCount: self.post.reaction.likeCount,
            isReacted: self.post.reaction.userReactionType == ReactionType.like
          ) { reaction in
            self.postHandler.updateReaction(post: self.post, reaction: .like)
          }
          
          Spacer()
          
          ReactionButton(
            reactionType: .dislike,
            reactionCount: self.post.reaction.dislikeCount,
            isReacted: self.post.reaction.userReactionType == ReactionType.dislike
          ) { reaction in
            self.postHandler.updateReaction(post: self.post, reaction: .dislike)
          }
          
          Spacer()
          
          ReactionButton(
            reactionType: .love,
            reactionCount: self.post.reaction.loveCount,
            isReacted: self.post.reaction.userReactionType == ReactionType.love
          ) { reaction in
            self.postHandler.updateReaction(post: self.post, reaction: .love)
          }
          // Added this background to block Imageview to get
          // the tapgesture call. Without this background the image view
          // recieve the tap even if I tap inside the HStack
          // Used system color so that it will work in both
          // dark and light mode
        }.background(Color(UIColor.systemBackground))
      }
      
      Spacer()
    }
=======
  let postHandler : PostViewModel
  let post: MediaPost
  
  @State var editedText = ""
  @State var showingActionSheet = false
  @State var showEditView = false
  
  var body: some View {
    
    VStack{
      HStack {
        Image("mascot_swift-badge")
          .resizable()
          .frame(width: 50, height: 50)
        VStack(alignment: .leading) {
          Text("\(post.userName)")
          Text("\(post.getFormatedDate())")
        }
        Spacer()
        Image(systemName: "ellipsis")
          .font(.system(size: 22))
          .foregroundColor(.gray)
          .onTapGesture {
            self.showingActionSheet = true
        }
      }
      
      HStack {
        Text("\(post.textBody ?? "")")
        Spacer()
      }
      if post.uiImage != nil {
        Image(uiImage: post.uiImage!)
          .resizable()
          .aspectRatio(contentMode: .fit)
          .frame(width: 150, height: 150, alignment: .center)
      }
      //Edited comment
      HStack{
        Spacer()
        if post.edited == true {
          Text("edited")
            .fontWeight(.thin)
            .italic()
        }
      }
      
    }
      //action sheet for Delete or Edit post
      .actionSheet(isPresented: $showingActionSheet) {
        ActionSheet(title: Text("Choose Option"), message: Text("Edit or Delete"), buttons: [
          //Edit post
          .default(Text("Edit Post"), action: {
            self.showEditView = true
          }),
          //Delete post
          .destructive(Text("Delete Post"), action: {
            self.postHandler.removePost(post: self.post)
          }),
          .cancel()
        ])
        //End of action sheet
    }
    .sheet(isPresented: $showEditView) {
      // TODO: Show ImagePicker
      PostEditView(postHandler: self.postHandler, post: self.post, textBody: self.post.textBody ?? "")
    }
>>>>>>> 176c78790ed80c830b74059614a116196bf2c5e1
  }
}

struct PostView_Previews: PreviewProvider {
  static var previews: some View {
<<<<<<< HEAD
    PostView(post: MediaPost(
      textBody: "Went to the Aquarium today :]",
      userName: "Audrey",
      timestamp: Date(timeIntervalSinceNow: -9876),
      uiImage: UIImage(named: "ray")),
    postHandler: PostViewModel())
=======
    PostView(postHandler: PostViewModel(), post: MediaPost(textBody: "Went to the Aquarium today :]",
                                                           userName: "Audrey", timestamp: Date(timeIntervalSinceNow: -9876),
                                                           uiImage: UIImage(named: "octopus")))
>>>>>>> 176c78790ed80c830b74059614a116196bf2c5e1
  }
}
